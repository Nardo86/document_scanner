import 'package:flutter/material.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:document_scanner/document_scanner.dart';

void main() {
  runApp(const DocumentScannerExampleApp());
}

class DocumentScannerExampleApp extends StatelessWidget {
  const DocumentScannerExampleApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Document Scanner Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: const HomePage(),
    );
  }
}

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  String _packageVersion = 'Loading...';
  String _packageName = 'Loading...';
  String _lastResult = 'No scans yet';
  String _customStoragePath = '';
  String _customFilename = '';
  final TextEditingController _pathController = TextEditingController();
  final TextEditingController _filenameController = TextEditingController();
  final TextEditingController _urlController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _loadPackageInfo();
    _configureDocumentScanner();
  }
  
  /// Configure document scanner with custom storage path
  void _configureDocumentScanner() {
    DocumentScannerService().configureStorage(
      appName: 'DocumentScannerExample',
      customStorageDirectory: _customStoragePath.isEmpty ? null : _customStoragePath,
      pdfBrandingText: 'Generated by Document Scanner Example',
    );
  }

  Future<void> _loadPackageInfo() async {
    final packageInfo = await PackageInfo.fromPlatform();
    setState(() {
      _packageName = 'Document Scanner';
      _packageVersion = 'v${packageInfo.version}';
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Document Scanner Example'),
        backgroundColor: Colors.blue,
        foregroundColor: Colors.white,
      ),
      body: Container(
        width: double.infinity,
        padding: const EdgeInsets.all(24.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            const SizedBox(height: 16),
            
            // Simple header with title and version
            Text(
              '$_packageName $_packageVersion',
              style: Theme.of(context).textTheme.titleLarge?.copyWith(
                fontWeight: FontWeight.bold,
                color: Colors.blue[800],
              ),
            ),
            
            const SizedBox(height: 24),
            
            // Configuration section
            _buildConfigurationSection(),
            
            const SizedBox(height: 24),
            
            // Test buttons
            _buildTestButtons(),
            
            const SizedBox(height: 24),
            
            // Last result display
            _buildResultDisplay(),
          ],
        ),
      ),
    );
  }

  /// Build configuration section
  Widget _buildConfigurationSection() {
    return Card(
      child: Container(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                const Icon(Icons.settings, color: Colors.blue),
                const SizedBox(width: 8),
                Text(
                  'Configuration',
                  style: Theme.of(context).textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            
            // Custom storage path
            TextField(
              controller: _pathController,
              decoration: const InputDecoration(
                labelText: 'Custom Storage Path (optional)',
                hintText: '/storage/emulated/0/Documents/MyApp',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.folder),
              ),
              onChanged: (value) {
                _customStoragePath = value;
              },
            ),
            
            const SizedBox(height: 12),
            
            // Custom filename
            TextField(
              controller: _filenameController,
              decoration: const InputDecoration(
                labelText: 'Custom Filename (optional)',
                hintText: 'MyDocument',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.file_present),
              ),
              onChanged: (value) {
                _customFilename = value;
              },
            ),
            
            const SizedBox(height: 12),
            
            // Apply configuration button
            SizedBox(
              width: double.infinity,
              child: ElevatedButton.icon(
                onPressed: () {
                  _configureDocumentScanner();
                  setState(() {
                    _lastResult = 'Configuration updated:\n'
                        'Storage Path: ${_customStoragePath.isEmpty ? 'Default' : _customStoragePath}\n'
                        'Custom Filename: ${_customFilename.isEmpty ? 'Auto-generated' : _customFilename}';
                  });
                },
                icon: const Icon(Icons.check),
                label: const Text('Apply Configuration'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.indigo,
                  foregroundColor: Colors.white,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// Build test buttons section
  Widget _buildTestButtons() {
    return Column(
      children: [
        // Main Features
        Text(
          'Document Scanner Features',
          style: Theme.of(context).textTheme.titleMedium?.copyWith(
            fontWeight: FontWeight.bold,
            color: Colors.grey[700],
          ),
        ),
        
        const SizedBox(height: 16),
        
        // Single Page Scanner
        SizedBox(
          width: double.infinity,
          child: ElevatedButton.icon(
            onPressed: _scanDocument,
            icon: const Icon(Icons.document_scanner),
            label: const Text('Single Page Scanner'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blue,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.all(16),
            ),
          ),
        ),
        
        const SizedBox(height: 12),
        
        // Multi-Page Scanner
        SizedBox(
          width: double.infinity,
          child: ElevatedButton.icon(
            onPressed: _multiPageScan,
            icon: const Icon(Icons.library_books),
            label: const Text('Multi-Page Scanner'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.green,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.all(16),
            ),
          ),
        ),
        
        const SizedBox(height: 24),
        
        // Additional Features
        Text(
          'Additional Features',
          style: Theme.of(context).textTheme.titleMedium?.copyWith(
            fontWeight: FontWeight.bold,
            color: Colors.grey[700],
          ),
        ),
        
        const SizedBox(height: 16),
        
        // QR Code Scanner button
        SizedBox(
          width: double.infinity,
          child: ElevatedButton.icon(
            onPressed: _scanQRCode,
            icon: const Icon(Icons.qr_code_scanner),
            label: const Text('QR Code Scanner'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.orange,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.all(16),
            ),
          ),
        ),
        
        const SizedBox(height: 12),
        
        // Download from URL button
        SizedBox(
          width: double.infinity,
          child: ElevatedButton.icon(
            onPressed: _downloadFromUrl,
            icon: const Icon(Icons.download),
            label: const Text('Download from URL'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.purple,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.all(16),
            ),
          ),
        ),
      ],
    );
  }

  /// Build result display section
  Widget _buildResultDisplay() {
    return Card(
      child: Container(
        width: double.infinity,
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                const Icon(Icons.info_outline, color: Colors.blue),
                const SizedBox(width: 8),
                Text(
                  'Last Result',
                  style: Theme.of(context).textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            Text(
              _lastResult,
              style: Theme.of(context).textTheme.bodyMedium,
            ),
          ],
        ),
      ),
    );
  }

  /// Scan document functionality
  Future<void> _scanDocument() async {
    setState(() => _lastResult = 'Starting document scan...');
    
    try {
      await Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => DocumentScannerWidget(
            documentType: DocumentType.document,
            customFilename: _customFilename.isEmpty ? null : _customFilename,
            onScanComplete: (ScanResult result) {
              Navigator.pop(context);
              setState(() {
                if (result.success && result.document != null) {
                  final doc = result.document!;
                  final filename = doc.pdfPath?.split('/').last ?? 'Unknown';
                  _lastResult = 'Document scanned successfully!\n'
                      'File: $filename\n'
                      'Pages: ${doc.pages.length}\n'
                      'PDF Path: ${doc.pdfPath ?? doc.processedPath ?? 'Not generated'}';
                } else {
                  _lastResult = 'Scan failed: ${result.error ?? 'Unknown error'}';
                }
              });
            },
            onError: (String error) {
              setState(() => _lastResult = 'Error: $error');
            },
          ),
        ),
      );
    } catch (e) {
      setState(() => _lastResult = 'Failed to start scanner: $e');
    }
  }


  /// Multi-page scanner functionality
  Future<void> _multiPageScan() async {
    setState(() => _lastResult = 'Starting multi-page scan...');
    
    try {
      await Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => MultiPageScannerWidget(
            documentType: DocumentType.manual,
            customFilename: _customFilename.isEmpty ? 'MultiPageTest' : _customFilename,
            onScanComplete: (ScanResult result) {
              Navigator.pop(context);
              setState(() {
                if (result.success && result.document != null) {
                  final doc = result.document!;
                  final filename = doc.pdfPath?.split('/').last ?? 'Unknown';
                  _lastResult = 'Multi-page document created successfully!\n'
                      'File: $filename\n'
                      'Pages: ${doc.pages.length}\n'
                      'PDF Path: ${doc.pdfPath ?? doc.processedPath ?? 'Not generated'}';
                } else {
                  _lastResult = 'Multi-page scan failed: ${result.error ?? 'Unknown error'}';
                }
              });
            },
          ),
        ),
      );
    } catch (e) {
      setState(() => _lastResult = 'Failed to start multi-page scanner: $e');
    }
  }

  /// QR Code scanner functionality with automatic download
  Future<void> _scanQRCode() async {
    setState(() => _lastResult = 'Starting QR code scan...');
    
    try {
      // Use QRScannerService directly for scanning, then DocumentScannerService for download
      final qrScanner = QRScannerService();
      final qrResult = await qrScanner.scanQRCodeWithUI(context);
      
      if (!qrResult.success) {
        setState(() => _lastResult = 'QR scan failed: ${qrResult.error ?? 'Unknown error'}');
        return;
      }
      
      setState(() {
        _lastResult = 'QR Code scanned successfully!\n'
            'Content: ${qrResult.qrData}\n'
            'Type: ${qrResult.contentType.toString()}\n'
            'Checking if downloadable...';
      });
      
      // Check if it's a downloadable link and download automatically
      if (qrResult.contentType == QRContentType.pdfLink || 
          qrResult.contentType == QRContentType.manualLink) {
        
        setState(() => _lastResult += '\n\nDownloading document...');
        
        try {
          final downloadResult = await DocumentScannerService().downloadManualFromUrl(
            url: qrResult.qrData,
            customFilename: _customFilename.isEmpty ? 'QRDocument' : _customFilename,
          );
          
          setState(() {
            if (downloadResult.success && downloadResult.document != null) {
              final doc = downloadResult.document!;
              final filename = doc.pdfPath?.split('/').last ?? 
                             doc.metadata['filename'] ?? 'Unknown';
              _lastResult = 'QR Document downloaded successfully!\n'
                  'QR Content: ${qrResult.qrData}\n'
                  'Type: ${qrResult.contentType.toString()}\n'
                  'Downloaded File: $filename\n'
                  'File Size: ${doc.metadata['fileSize'] ?? 'Unknown'} bytes\n'
                  'Content Type: ${doc.metadata['contentType'] ?? 'Unknown'}\n'
                  'PDF Path: ${doc.pdfPath ?? 'Not generated'}';
            } else {
              _lastResult += '\nDownload failed: ${downloadResult.error ?? 'Unknown error'}';
            }
          });
        } catch (e) {
          setState(() => _lastResult += '\nDownload failed: $e');
        }
      } else {
        setState(() {
          _lastResult += '\n\nQR code does not contain a downloadable document link.\n'
              'Content type: ${qrResult.contentType}\n'
              'Use this for text/URL QR codes, not document downloads.';
        });
      }
    } catch (e) {
      setState(() => _lastResult = 'Failed to start QR scanner: $e');
    }
  }

  /// Download from URL functionality
  Future<void> _downloadFromUrl() async {
    // Clear URL field first
    _urlController.clear();
    
    // Show dialog to input URL
    final url = await showDialog<String>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Download from URL'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Text('Enter the URL of the document to download:'),
              const SizedBox(height: 16),
              TextField(
                controller: _urlController,
                decoration: const InputDecoration(
                  labelText: 'Document URL',
                  hintText: 'https://example.com/document.pdf',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.link),
                ),
                autofocus: true,
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('Cancel'),
            ),
            ElevatedButton(
              onPressed: () {
                if (_urlController.text.isNotEmpty) {
                  Navigator.of(context).pop(_urlController.text);
                }
              },
              child: const Text('Download'),
            ),
          ],
        );
      },
    );

    if (url == null || url.isEmpty) {
      setState(() => _lastResult = 'Download cancelled');
      return;
    }

    setState(() => _lastResult = 'Downloading from URL: $url');

    try {
      final downloadResult = await DocumentScannerService().downloadManualFromUrl(
        url: url,
        customFilename: _customFilename.isEmpty ? 'URLDocument' : _customFilename,
      );

      setState(() {
        if (downloadResult.success && downloadResult.document != null) {
          final doc = downloadResult.document!;
          final filename = doc.pdfPath?.split('/').last ?? 
                         doc.metadata['filename'] ?? 'Unknown';
          _lastResult = 'Document downloaded successfully!\n'
              'URL: $url\n'
              'Downloaded File: $filename\n'
              'File Size: ${doc.metadata['fileSize'] ?? 'Unknown'} bytes\n'
              'Content Type: ${doc.metadata['contentType'] ?? 'Unknown'}\n'
              'PDF Path: ${doc.pdfPath ?? 'Not generated'}';
        } else {
          _lastResult = 'Download failed: ${downloadResult.error ?? 'Unknown error'}';
        }
      });
    } catch (e) {
      setState(() => _lastResult = 'Download failed: $e');
    }

    // Clear URL field after download
    _urlController.clear();
  }

}