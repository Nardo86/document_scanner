name: Build and Release Document Scanner

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  actions: read
  security-events: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Java 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.5'
        channel: 'stable'
    
    - name: Install package dependencies
      run: flutter pub get
    
    - name: Analyze package code
      run: flutter analyze
      timeout-minutes: 5
    
    - name: Test package
      run: flutter test
      timeout-minutes: 10
      continue-on-error: true
    
    - name: Install example app dependencies
      run: flutter pub get
      working-directory: example
    
    - name: Analyze example app code
      run: flutter analyze
      working-directory: example
      timeout-minutes: 5
    
    - name: Build example app APK
      run: flutter build apk --release
      working-directory: example
      timeout-minutes: 20
    
    - name: Get version from pubspec.yaml
      id: get_version
      run: |
        VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2 | cut -d '+' -f 1)
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
    
    - name: Rename APK with version
      run: |
        cd example/build/app/outputs/flutter-apk/
        mv app-release.apk document_scanner_example_v${{ steps.get_version.outputs.VERSION }}.apk
        ls -la *.apk
    
    - name: Generate release notes
      id: release_notes
      run: |
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          RELEASE_NOTES=$(git log --oneline $PREVIOUS_TAG..HEAD --pretty=format:"- %s")
        else
          RELEASE_NOTES="Initial release"
        fi
        
        cat > release_notes.md << EOF
        # Document Scanner v${{ steps.get_version.outputs.VERSION }}
        
        ## Changes
        $RELEASE_NOTES
        
        ## Installation
        
        ### For Testing
        Download the APK file and install it on your Android device to test the document scanner functionality.
        
        ### For Development
        Add this to your Flutter project's \`pubspec.yaml\`:
        
        \`\`\`yaml
        dependencies:
          document_scanner:
            git:
              url: https://github.com/Nardo86/document_scanner.git
              ref: v${{ steps.get_version.outputs.VERSION }}
        \`\`\`
        
        ## Features
        - Document scanning with automatic cropping and filtering
        - Multi-page document support
        - PDF generation
        - QR code scanning for manual downloads
        - Multiple document types (receipts, manuals, documents)
        - External storage with flexible file naming
        
        ## Requirements
        - Flutter 3.0.0 or higher
        - Dart SDK 3.8.1 or higher
        - Android: Camera, Storage, Internet permissions
        - iOS: Camera, Photo Library access
        EOF
        
        echo "Generated release notes:"
        cat release_notes.md
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: example/build/app/outputs/flutter-apk/document_scanner_example_v${{ steps.get_version.outputs.VERSION }}.apk
        body_path: release_notes.md
        name: Document Scanner v${{ steps.get_version.outputs.VERSION }}
        tag_name: ${{ github.ref_name }}
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
    
